# cogs/academic/schedule.py

import os
import re
import discord
from discord import ui
from discord.ext import commands
import pymongo
from dotenv import load_dotenv

load_dotenv()
MONGO_URI = os.getenv("MONGO_URI")

# --------------------------
# ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
# --------------------------
DAYS_TH_EN = [
    ("‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "Mon"),
    ("‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "Tue"),
    ("‡∏û‡∏∏‡∏ò", "Wed"),
    ("‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "Thu"),
    ("‡∏®‡∏∏‡∏Å‡∏£‡πå", "Fri"),
    ("‡πÄ‡∏™‡∏≤‡∏£‡πå", "Sat"),
    ("‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "Sun"),
]
DAYS_ORDER_TH = [d[0] for d in DAYS_TH_EN]
DAY_TH_TO_EN = {th: en for th, en in DAYS_TH_EN}
DAY_TH_LOWER_TO_EN = {th.lower(): en for th, en in DAYS_TH_EN}

# --------------------------
# Modal 2 ‡∏ä‡πà‡∏≠‡∏á (‡πÄ‡∏ß‡∏•‡∏≤ + ‡∏ß‡∏¥‡∏ä‡∏≤)
# ‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å dropdown
# --------------------------
class TwoFieldModal(ui.Modal, title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"):
    time_input = ui.TextInput(
        label="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 09:00-12:00)", placeholder="09:00-12:00", required=True
    )
    subject_input = ui.TextInput(
        label="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤", placeholder="GEN101 General Physics", required=True
    )

    def __init__(self, db_collection, selected_day_th: str):
        super().__init__()
        self.db_collection = db_collection
        self.selected_day_th = selected_day_th  # ‡∏à‡∏≤‡∏Å dropdown

    async def on_submit(self, interaction: discord.Interaction):
        day_th = self.selected_day_th
        day_en = DAY_TH_TO_EN.get(day_th, "")
        time = self.time_input.value
        subject = self.subject_input.value

        schedule_data = {
            "user_id": interaction.user.id,
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            "day_th": day_th,
            "day_en": day_en,
            "day": day_th.lower(),  # legacy (‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ó‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å)
            "time": time,
            "subject": subject,
        }
        self.db_collection.insert_one(schedule_data)

        label_day = f"{day_th} ({day_en})" if day_en else day_th
        await interaction.response.send_message(
            f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ **{subject}** ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô **{label_day}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",
            ephemeral=True
        )

# --------------------------
# Dropdown ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
# --------------------------
class DaySelect(ui.Select):
    def __init__(self, db_collection):
        options = [
            discord.SelectOption(label=f"{th} ({en})", value=th, emoji="üóìÔ∏è")
            for th, en in DAYS_TH_EN
        ]
        super().__init__(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‚Ä¶",
            min_values=1, max_values=1, options=options
        )
        self.db_collection = db_collection

    async def callback(self, interaction: discord.Interaction):
        selected_day_th = self.values[0]
        # ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÄ‡∏ß‡∏•‡∏≤ + ‡∏ß‡∏¥‡∏ä‡∏≤) ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        modal = TwoFieldModal(self.db_collection, selected_day_th)
        await interaction.response.send_modal(modal)

# --------------------------
# View ‡∏´‡∏•‡∏±‡∏Å: ‡πÉ‡∏™‡πà Dropdown ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
# --------------------------
class AddClassView(ui.View):
    def __init__(self, author: discord.Member, db_collection):
        super().__init__(timeout=180)
        self.author = author
        self.db_collection = db_collection
        self.add_item(DaySelect(self.db_collection))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.author:
            await interaction.response.send_message("‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞!", ephemeral=True)
            return False
        return True

# --------------------------
# Helper: ‡πÅ‡∏õ‡∏•‡∏á key ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ô & sort ‡πÄ‡∏ß‡∏•‡∏≤
# --------------------------
def normalize_day_key(item):
    """
    ‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ 1 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å Mongo ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô key) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    """
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà (day_th) ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πà‡∏≤ (day=‡πÑ‡∏ó‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å)
    if "day_th" in item:
        return item["day_th"]
    d = item.get("day", "")
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏î‡∏¥‡∏°)
    for th in DAY_TH_TO_EN:
        if d == th or d == th.lower():
            return th
    return d  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö (‡∏à‡∏∞‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏∏‡πà‡∏° "‡∏≠‡∏∑‡πà‡∏ô‡πÜ")

def get_day_label_th_en(day_th: str) -> str:
    en = DAY_TH_TO_EN.get(day_th, "")
    return f"{day_th} ({en})" if en else day_th

def time_sort_key(time_range: str):
    """
    ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πà‡∏ô '09:00-12:00' ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sort (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°)
    """
    if not isinstance(time_range, str):
        return "00:00"
    parts = time_range.split("-")
    start = parts[0].strip() if parts else time_range.strip()
    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏à‡∏∞‡∏ï‡∏Å‡∏°‡∏≤ default '00:00'
    return start if re.match(r"^\d{1,2}:\d{2}$", start) else "00:00"

# --------------------------
# Cog ‡∏´‡∏•‡∏±‡∏Å
# --------------------------
class Schedule(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        try:
            self.client = pymongo.MongoClient(MONGO_URI)
            self.db = self.client["discord_bot_db"]
            self.collection = self.db["schedules"]
            print("‚úÖ MongoDB connection successful for Schedule Cog.")
        except pymongo.errors.ConfigurationError:
            print("‚ùå MongoDB connection failed. Check your MONGO_URI.")
            self.client = None

    @commands.command(name="addclass", aliases=["asch", "ac"])
    async def add_class_interactive(self, ctx: commands.Context):
        """
        ‡πÄ‡∏õ‡∏¥‡∏î View ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô (‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö) ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Modal ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤
        """
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return

        view = AddClassView(author=ctx.author, db_collection=self.collection)
        await ctx.send("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏ö‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß üëá", view=view)

    @commands.command(name="myschedule", aliases=["mysch", "sch"])
    async def my_schedule(self, ctx: commands.Context):
        """
        ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ß‡∏±‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö ‡πÄ‡∏ä‡πà‡∏ô '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå (Mon)'
        """
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return

        user_schedules = self.collection.find({"user_id": ctx.author.id})

        schedule_by_day = {}
        for item in user_schedules:
            day_th = normalize_day_key(item)  # ‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            schedule_by_day.setdefault(day_th, []).append(item)

        if not schedule_by_day:
            await ctx.send("ü§î ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏∞! ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ `baddclass` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏¥")
            return

        embed = discord.Embed(
            title=f"üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á {ctx.author.display_name}",
            color=discord.Color.teal(),
        )

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        for day_th in DAYS_ORDER_TH:
            if day_th in schedule_by_day:
                items = schedule_by_day[day_th]
                # sort ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
                items_sorted = sorted(items, key=lambda x: time_sort_key(x.get("time", "")))

                day_info_lines = []
                for s in items_sorted:
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤ + ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤
                    t = s.get("time", "-")
                    subj = s.get("subject", "(‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤)")
                    day_info_lines.append(f"`{t}` - **{subj}**")

                embed.add_field(
                    name=f"üóìÔ∏è {get_day_label_th_en(day_th)}",
                    value="\n".join(day_info_lines) if day_info_lines else "‚Äî",
                    inline=False
                )

        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤/‡∏™‡∏∞‡∏Å‡∏î‡πÅ‡∏õ‡∏•‡∏Å)
        others = [k for k in schedule_by_day.keys() if k not in DAYS_ORDER_TH]
        for day_th in others:
            items = schedule_by_day[day_th]
            items_sorted = sorted(items, key=lambda x: time_sort_key(x.get("time", "")))
            day_info_lines = [f"`{s.get('time','-')}` - **{s.get('subject','(‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤)')}**" for s in items_sorted]
            embed.add_field(
                name=f"üóìÔ∏è {get_day_label_th_en(day_th)}",
                value="\n".join(day_info_lines) if day_info_lines else "‚Äî",
                inline=False
            )

        await ctx.send(embed=embed)


    # --- ‡πÇ‡∏Ñ‡πâ‡∏î delclass (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡πÑ‡∏î‡πâ) ---


    @commands.command(name="delclass", aliases=["dsch", "dc"])
    async def delete_class(self, ctx, *, subject_to_delete: str):
        """
        ‡∏•‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
        ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: !delclass GEN101 General Physics
        """
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏¢‡∏∏‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        normalized = re.sub(r"\s+", " ", subject_to_delete.strip())

        result = self.collection.delete_many({
            "user_id": ctx.author.id,
            "subject": {
                "$regex": f"^{re.escape(normalized)}$",
                "$options": "i"
            }
        })

        if result.deleted_count > 0:
            await ctx.send(f"‚úÖ **‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!** ‡∏ß‡∏¥‡∏ä‡∏≤ **{normalized}** ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö {result.deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        else:
            await ctx.send(f"ü§î **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•** ‡∏ß‡∏¥‡∏ä‡∏≤ **{normalized}** ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

async def setup(bot):
    await bot.add_cog(Schedule(bot))
