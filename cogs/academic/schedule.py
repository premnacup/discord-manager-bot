# cogs/academic/schedule.py

import os
import discord
from discord import ui
from discord.ext import commands
import pymongo
#from dotenv import load_dotenv

#load_dotenv()
MONGO_URI = os.getenv("MONGO_URI")


# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á Modal ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏∏‡∏Å Field ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ---
class SingleScheduleModal(ui.Modal, title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"):
    day_input = ui.TextInput(
        label="‡∏ß‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£)", placeholder="‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", required=True
    )
    time_input = ui.TextInput(
        label="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 09:00-12:00)", placeholder="09:00-12:00", required=True
    )
    subject_input = ui.TextInput(
        label="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤", placeholder="GEN101 General Physics", required=True
    )

    def __init__(self, db_collection):
        super().__init__()
        self.db_collection = db_collection

    async def on_submit(self, interaction: discord.Interaction):
        day = self.day_input.value
        time = self.time_input.value
        subject = self.subject_input.value

        schedule_data = {
            "user_id": interaction.user.id,
            "day": day.lower(),
            "time": time,
            "subject": subject,
        }
        self.db_collection.insert_one(schedule_data)

        await interaction.response.send_message(
            f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ **{subject}** ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô **{day}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True
        )


# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Modal ---
class AddClassView(ui.View):
    def __init__(self, author: discord.Member, db_collection):
        super().__init__(timeout=180)
        self.author = author
        self.db_collection = db_collection

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.author:
            await interaction.response.send_message("‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞!", ephemeral=True)
            return False
        return True

    @ui.button(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", style=discord.ButtonStyle.primary)
    async def add_button(self, interaction: discord.Interaction, button: ui.Button):
        modal = SingleScheduleModal(self.db_collection)
        await interaction.response.send_modal(modal)

        self.stop()
        button.disabled = True
        await interaction.edit_original_response(view=self)


# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: Cog ‡∏´‡∏•‡∏±‡∏Å (‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á) ---
class Schedule(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        try:
            self.client = pymongo.MongoClient(MONGO_URI)
            self.db = self.client["discord_bot_db"]
            self.collection = self.db["schedules"]
            print("‚úÖ MongoDB connection successful for Schedule Cog.")
        except pymongo.errors.ConfigurationError:
            print("‚ùå MongoDB connection failed. Check your MONGO_URI.")
            self.client = None

    @commands.command(name="addclass")
    async def add_class_interactive(self, ctx: commands.Context):
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return

        view = AddClassView(author=ctx.author, db_collection=self.collection)
        await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!", view=view)

    @commands.command(name="myschedule")
    async def my_schedule(self, ctx: commands.Context):
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return

        user_schedules = self.collection.find({"user_id": ctx.author.id})

        schedule_by_day = {}
        for item in user_schedules:
            day = item["day"].capitalize()
            if day not in schedule_by_day:
                schedule_by_day[day] = []
            schedule_by_day[day].append(item)

        if not schedule_by_day:
            await ctx.send("ü§î ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏∞! ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ `baddclass` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏¥")
            return

        embed = discord.Embed(
            title=f"üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á {ctx.author.display_name}",
            color=discord.Color.teal(),
        )
        days_order = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]

        for day in days_order:
            if day in schedule_by_day:
                day_info = ""
                for s in sorted(schedule_by_day[day], key=lambda x: x["time"]):
                    day_info += f"`{s['time']}` - **{s['subject']}**\n"

                embed.add_field(name=f"üóìÔ∏è {day}", value=day_info, inline=False)

        await ctx.send(embed=embed)

    # --- ‡πÇ‡∏Ñ‡πâ‡∏î delclass (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡πÑ‡∏î‡πâ) ---


    @commands.command(name="delclass")
    async def delete_class(self, ctx, *, subject_to_delete: str):
            """
            ‡∏•‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
            ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: !delclass GEN101 General Physics
            """
            if not self.client:
                await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
                return

            result = self.collection.delete_one(
            {"user_id": ctx.author.id, "subject": subject_to_delete}
    )

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if result.deleted_count > 0:
            # ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (deleted_count ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0)
                await ctx.send(
                    f"‚úÖ **‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!** ‡∏ß‡∏¥‡∏ä‡∏≤ **{subject_to_delete}** ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
                )
            else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
                await ctx.send(f"ü§î **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**‡∏ß‡∏¥‡∏ä‡∏≤ **{subject_to_delete}** ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")


async def setup(bot):
    await bot.add_cog(Schedule(bot))
