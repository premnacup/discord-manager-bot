# cogs/academic/HomeworkManager.py

import os
import re
import discord
from discord import ui
from discord.ext import commands
import pymongo
from datetime import datetime
from math import ceil

MONGO_URI = os.getenv("MONGO_URI")

# --------------------------
# Utilities
# --------------------------
DATE_FORMATS = [
    "%Y-%m-%d",      # 2025-11-23
    "%d/%m/%Y",      # 23/11/2025
]
TIME_FORMATS = [
    "%H:%M",         # 09:30
    "%H:%M:%S",      # 09:30:00
]

def _maybe_be(year: int) -> int:
    """‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®. (>=2400) ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡πÇ‡∏î‡∏¢‡∏•‡∏ö 543"""
    return year - 543 if year >= 2400 else year

def _strip_time_from_date_if_any(date_text: str) -> str:
    """
    ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á '‡∏ß‡∏±‡∏ô' ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ú‡∏•‡∏≠‡∏ß‡∏≤‡∏á‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á timestamp ‡πÄ‡∏ä‡πà‡∏ô 2568-11-23T00:00:00
    - ‡πÄ‡∏≠‡∏≤ 'T' ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    """
    s = (date_text or "").strip()
    if "T" in s:
        s = s.replace("T", " ")
    # ‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    s = re.split(r"\s+\d{1,2}:\d{2}(:\d{2})?$", s)[0]
    return s.strip()

def _fix_be_in_text_date(date_text: str) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡∏´‡∏£‡∏∑‡∏≠ DD/MM/YYYY"""
    s = date_text.strip()
    m = re.match(r"^(\d{4})-(\d{2})-(\d{2})$", s)
    if m:
        y = _maybe_be(int(m.group(1)))
        return f"{y:04d}-{m.group(2)}-{m.group(3)}"
    m = re.match(r"^(\d{2})/(\d{2})/(\d{4})$", s)
    if m:
        y = _maybe_be(int(m.group(3)))
        return f"{m.group(1)}/{m.group(2)}/{y:04d}"
    return s

def _parse_date(date_text: str) -> datetime:
    last_err = None
    for fmt in DATE_FORMATS:
        try:
            return datetime.strptime(date_text, fmt)
        except Exception as e:
            last_err = e
    raise ValueError(
        f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: '{date_text}' (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ: 2025-11-23 ‡∏´‡∏£‡∏∑‡∏≠ 23/11/2025)"
    ) from last_err

def _parse_time(time_text: str) -> tuple[int, int, int]:
    last_err = None
    for fmt in TIME_FORMATS:
        try:
            t = datetime.strptime(time_text, fmt)
            return (t.hour, t.minute, t.second)
        except Exception as e:
            last_err = e
    raise ValueError(
        f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: '{time_text}' (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ: 09:30 ‡∏´‡∏£‡∏∑‡∏≠ 09:30:00)"
    ) from last_err

def parse_due(date_text: str | None, time_text: str | None):
    """
    ‡∏£‡∏±‡∏ö '‡∏ß‡∏±‡∏ô' ‡πÅ‡∏•‡∏∞ '‡πÄ‡∏ß‡∏•‡∏≤' ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    ‡∏Ñ‡∏∑‡∏ô (due_display => 'YYYY-MM-DD HH:MM', due_ts)
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô
    - ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á -> raise ValueError
    """
    if not date_text or not date_text.strip():
        raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å '‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á'")
    if not time_text or not time_text.strip():
        raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å '‡πÄ‡∏ß‡∏•‡∏≤'")

    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏á timestamp ‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô
    date_clean = _strip_time_from_date_if_any(date_text)
    # ‡πÅ‡∏Å‡πâ‡∏õ‡∏µ ‡∏û.‡∏®. -> ‡∏Ñ.‡∏®.
    date_clean = _fix_be_in_text_date(date_clean)

    # parse
    d = _parse_date(date_clean)
    h, m, s = _parse_time(time_text.strip())

    dt = d.replace(hour=h, minute=m, second=s, microsecond=0)
    due_display = dt.strftime("%Y-%m-%d %H:%M")   # ‡πÑ‡∏°‡πà‡∏°‡∏µ 'T' ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
    due_ts = int(dt.timestamp())
    return (due_display, due_ts)

def human_left(ts: int | None) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡πÄ‡∏´‡∏•‡∏∑‡∏≠ X ‡∏ß‡∏±‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î' ‡∏à‡∏≤‡∏Å timestamp (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"""
    if not ts:
        return ""
    now = datetime.now().timestamp()
    diff_days = (ts - now) / 86400.0
    if diff_days < 0:
        return "‚è∞ ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß"
    days_left = ceil(diff_days)
    if days_left == 0:
        return "‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    return f"‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {days_left} ‡∏ß‡∏±‡∏ô"

# --------------------------
# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏¢‡∏Å‡∏ä‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞ '‡πÄ‡∏ß‡∏•‡∏≤' ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
# --------------------------
class HomeworkModal(ui.Modal, title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"):
    subject_input = ui.TextInput(
        label="‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤",
        placeholder="‡πÄ‡∏ä‡πà‡∏ô GEN101 General Physics, INT101 Programming",
        required=True,
    )
    assignment_input = ui.TextInput(
        label="‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô",
        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 5, ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏ó",
        style=discord.TextStyle.paragraph,
        required=True,
    )
    due_date_input = ui.TextInput(
        label="‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)",
        placeholder="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: 2025-11-23 ‡∏´‡∏£‡∏∑‡∏≠ 23/11/2025 (‡∏û.‡∏®. ‡πÄ‡∏ä‡πà‡∏ô 2568-11-23 ‡∏Å‡πá‡πÑ‡∏î‡πâ)",
        required=True,
    )
    due_time_input = ui.TextInput(
        label="‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)",
        placeholder="‡πÄ‡∏ä‡πà‡∏ô 09:30 ‡∏´‡∏£‡∏∑‡∏≠ 23:59 ‡∏´‡∏£‡∏∑‡∏≠ 09:30:00",
        required=True,
    )

    def __init__(self, db_collection):
        super().__init__()
        self.db_collection = db_collection

    async def on_submit(self, interaction: discord.Interaction):
        subject = self.subject_input.value
        assignment = self.assignment_input.value
        due_date_raw = self.due_date_input.value
        due_time_raw = self.due_time_input.value

        try:
            due_display, due_ts = parse_due(due_date_raw, due_time_raw)
        except ValueError as e:
            await interaction.response.send_message(f"‚ùå {e}", ephemeral=True)
            return

        homework_data = {
            "user_id": interaction.user.id,
            "subject": subject.strip(),
            "assignment": assignment.strip(),
            "due_display": due_display,  # 'YYYY-MM-DD HH:MM' (‡πÑ‡∏°‡πà‡∏°‡∏µ T)
            "due_ts": due_ts,            # unix seconds
        }
        self.db_collection.insert_one(homework_data)

        await interaction.response.send_message(
            f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤ **{subject}** ‡πÅ‡∏•‡πâ‡∏ß! üóìÔ∏è {due_display}",
            ephemeral=True
        )

# --------------------------
# View/Button (‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡∏î)
# --------------------------
class AddHWView(discord.ui.View):
    def __init__(self, db_collection, allowed_user_id: int | None = None, timeout: float | None = 180):
        super().__init__(timeout=timeout)
        self.db_collection = db_collection
        self.allowed_user_id = allowed_user_id

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if self.allowed_user_id and interaction.user.id != self.allowed_user_id:
            await interaction.response.send_message(
                "üö´ ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True
            )
            return False
        return True

    @discord.ui.button(label="‚ûï ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô", style=discord.ButtonStyle.primary)
    async def open_modal(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = HomeworkModal(self.db_collection)
        await interaction.response.send_modal(modal)

# --------------------------
# Cog ‡∏´‡∏•‡∏±‡∏Å
# --------------------------
class HomeworkManager(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.client = None
        self.db = None
        self.collection = None

        try:
            if not MONGO_URI:
                print("‚ùå MONGO_URI is not set")
                return
            self.client = pymongo.MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
            self.client.admin.command("ping")
            self.db = self.client["discord_bot_db"]
            self.collection = self.db["homeworks"]
            print("‚úÖ MongoDB connection successful for HomeworkManager Cog.")
        except Exception as e:
            print(f"‚ùå MongoDB connection failed for HomeworkManager. {e}")
            self.client = None
            self.db = None
            self.collection = None

    @commands.command(name="addhw",aliases=["addhomework","ahw"])
    async def add_homework(self, ctx: commands.Context):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Modal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)"""
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return
        view = AddHWView(self.collection, allowed_user_id=ctx.author.id)
        await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô üëá", view=view)

    @commands.command(name="hw",aliases=["myhw","myhomework"])
    async def my_homework(self, ctx: commands.Context):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ä‡∏≤ + ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤ ‡∏™‡πà‡∏á"""
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return

        user_homeworks = list(self.collection.find({"user_id": ctx.author.id}))
        hw_by_subject: dict[str, list[dict]] = {}
        for item in user_homeworks:
            subject = item.get("subject", "‡∏ß‡∏¥‡∏ä‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ")
            hw_by_subject.setdefault(subject, []).append(item)

        if not hw_by_subject:
            await ctx.send("üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á! ‡πÉ‡∏ä‡πâ `addhw` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
            return

        embed = discord.Embed(
            title=f"üìö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á {ctx.author.display_name}",
            color=discord.Color.orange(),
        )

        for subject in sorted(hw_by_subject.keys(), key=lambda s: s.lower()):
            assignments = hw_by_subject[subject]
            assignments.sort(key=lambda x: (x.get("due_ts") is None, x.get("due_ts") or 0))

            lines = []
            for hw in assignments:
                name = hw.get("assignment", "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)")
                due_display = hw.get("due_display")
                due_ts = hw.get("due_ts")
                if due_display:
                    lines.append(f"¬ª {name}  ‚Äî  üóìÔ∏è {due_display}  {human_left(due_ts)}")
                else:
                    lines.append(f"¬ª {name}")

            embed.add_field(name=f"üìù {subject}", value="\n".join(lines) or "-", inline=False)

        await ctx.send(embed=embed)

    @commands.command(name="delhw",aliases=["dhw"])
    async def delete_homework(self, ctx: commands.Context, *, assignment_to_delete: str):
        """
        ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô (contains + case-insensitive + ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
        """
        if not self.client:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            return

        normalized = re.sub(r"\s+", " ", assignment_to_delete.strip())
        pattern = re.sub(r"\s+", r"\\s+", re.escape(normalized))
        regex_contains = f".*{pattern}.*"

        result = self.collection.delete_many({
            "user_id": ctx.author.id,
            "assignment": {"$regex": regex_contains, "$options": "i"}
        })

        if result.deleted_count > 0:
            await ctx.send(f"‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö '{normalized}' ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {result.deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß")
        else:
            await ctx.send(f"ü§î ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö '{normalized}'")

async def setup(bot):
    await bot.add_cog(HomeworkManager(bot))
